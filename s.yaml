# ------------------------------------
#   官方手册: https://manual.serverless-devs.com/user-guide/aliyun/#fc3
#   常见小贴士: https://manual.serverless-devs.com/user-guide/tips/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------
edition: 3.0.0
name: hello-world-app
access: "{{ access }}"

vars: 
  region: "{{ region }}"

services:
  fc-gpu: # 业务名称/模块名称
    component:  fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:       # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      # 重要说明!!!
      # - 根据您选择直接使用官方公开示例镜像、或者从源码构建镜像这2种不同的方式，需要对s.yaml进行一些微调，具体说明如下：
      #    - 1. 如果您期望直接使用官方公开示例镜像，请删除/注释pre-deploy部分，这样将在s deploy阶段跳过构建镜像，直接进行部署（官网公开示例镜像均为public镜像，无须构建可直接在函数中使用）。
      #    - 2. 如果您期望从源码构建镜像，则保留pre-deploy部分，这样将在s deploy阶段自动构建镜像，然后进行部署。
      #pre-deploy:
      #  - component: fc build --use-docker --dockerfile ./code/Dockerfile  # 要运行的组件，格式为【component: 组件名 命令 参数】（可以通过s cli registry search --type Component 获取组件列表）
    props:
      region: ${vars.region}              # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "{{ functionName }}"
        description: ""
        caPort: 9000
        memorySize: 8192
        gpuMemorySize: 4096
        instanceType: g1
        timeout: 300
        runtime: custom-container
        customContainerConfig:
          image: "{{ acrRegistry }}"
        codeUri: ./code
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
      # triggers:
      #   - triggerName: httpTrigger # 触发器名称
      #     triggerType: http # 触发器类型
      #     description: 'xxxx'
      #     qualifier: LATEST # 触发服务的版本
      #     triggerConfig:
      #       authType: anonymous # 鉴权类型，可选值：anonymous、function
      #       disableURLInternet: false # 是否禁用公网访问 URL
      #       methods: # HTTP 触发器支持的访问方法，可选值：GET、POST、PUT、DELETE、HEAD
      #         - GET
      #         - POST
